#include "nRF24L01.h"
#include "RF24.h"
#include <FastLED.h>


#define NUM_LEDS 60
#define DATA_PIN 2

#define NRF_CHIP_ENABLE_PIN 9
#define NRF_CHIP_SELECT_PIN 10
const uint64_t writingPipe = 0xF0F0F0F001LL; //equals reading pipe of reaspberrypi
const uint64_t readingPipe = 0xF0F0F0F002LL; //equals writing pipe of reaspberrypi
const char* response = "01"; //must be last 2 bytes of first pipe


CRGB leds[NUM_LEDS];
CRGB set_leds[NUM_LEDS];

bool isToggledOn = false;

// Set up nRF24L01 radio on SPI bus plus pins 7 & 8
RF24 radio(NRF_CHIP_ENABLE_PIN,NRF_CHIP_SELECT_PIN);

const int max_payload_size = 32;
char receive_payload[max_payload_size+1]; // +1 to allow room for a terminating NULL char


void setup(void)
{

  FastLED.addLeds<WS2812B, DATA_PIN, RGB>(leds, NUM_LEDS);
 
  Serial.begin(115200);
  Serial.println("init");
  radio.begin();
  radio.enableDynamicPayloads();
 
  // optionally, increase the delay between retries & # of retries
  radio.setRetries(5,15);
  radio.openWritingPipe(writingPipe);
  radio.openReadingPipe(1,readingPipe);
  radio.startListening();

}


void handleReceivedMsg()
{
  char prefix = receive_payload[0];
  if(prefix == '0')
  {
    Serial.println("handle toggle...");
    isToggledOn = receive_payload[1] == '1' ? true : false;
  }
  else if(prefix == '1')
  {
    Serial.print("Set Anim: ");
    char anim = receive_payload[1];
    Serial.println(anim);
  }
  else if(prefix == '2')
  {
    String payload_string = (String)receive_payload;
    String r = payload_string.substring(2, 4);// assuming received payload like "2#ffffff"
    String g = payload_string.substring(4, 6);
    String b = payload_string.substring(6, 8);
    String color = "0x" + g + r + b; // because of GRB ordering
    
    for(int i = 0; i < NUM_LEDS; i++){
      set_leds[i] = strtol(&color[0], NULL, 0);
    }    
  }
}

void doLightAction(){
  for(int i = 0; i < NUM_LEDS; i++){
    leds[i] = isToggledOn ? set_leds[i] : CRGB::Black;
  }
  FastLED.show();
}
 
void loop(void)
{
  while ( radio.available() )
  {
 
    uint8_t len = radio.getDynamicPayloadSize();
    if(!len){
      continue;
    }
    radio.read( receive_payload, len );
    receive_payload[len] = 0;

    handleReceivedMsg();
  
    radio.stopListening();
    for(int i = 0; i < 10; i++){
      radio.write( response,2 );
    }
    Serial.println(F("Sent response."));
 
    radio.startListening();

    doLightAction();
  }
}
